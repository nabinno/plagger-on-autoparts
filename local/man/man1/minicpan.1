.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MINICPAN 1"
.TH MINICPAN 1 "2013-12-13" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
minicpan \- uses CPAN::Mini to create or update a local mirror
.SH "VERSION"
.IX Header "VERSION"
version 1.111015
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& minicpan [options]
.Ve
.PP
.Vb 18
\& Options
\&   -l LOCAL    - where is the local minicpan?     (required)
\&   -r REMOTE   - where is the remote cpan mirror? (required)
\&   -d 0###     - permissions (numeric) to use when creating directories
\&   -f          - check all directories, even if indices are unchanged
\&   -p          - mirror perl, ponie, and parrot distributions
\&   --debug     - run in debug mode (print even banal messages)
\&   -q          - run in quiet mode (don't print status)
\&   -qq         - run in silent mode (don't even print warnings)
\&   -c CLASS    - what class to use to mirror (default: CPAN::Mini)
\&   -C FILE     - what config file to use (default: ~/.minicpanrc)
\&   -h          - print help and exit
\&   -v          - print version and exit
\&   -x          - build an exact mirror, getting even normally disallowed files
\&   -t SEC      - timeout in sec. Defaults to 180 sec
\&   --offline   - operate in offline mode (generally: do nothing)
\&   --log-level - provide a log level; instead of --debug, -q, or -qq
\&   --remote-from TYPE - cpan remote from 'cpan' or 'cpanplus' configs
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This simple shell script just updates (or creates) a miniature \s-1CPAN\s0 mirror as
described in CPAN::Mini.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
By default, \f(CW\*(C`minicpan\*(C'\fR will read a configuration file to get configuration
information.  The file is a simple set of names and values, as in the following
example:
.PP
.Vb 3
\& local:  /home/rjbs/mirrors/minicpan/
\& remote: http://your.favorite.cpan/cpan/
\& exact_mirror: 1
.Ve
.PP
\&\f(CW\*(C`minicpan\*(C'\fR tries to find a configuration file through the following process.
It takes the first defined it finds:
.ie n .IP "* Use the value specified by ""\-C"" on the command line" 4
.el .IP "* Use the value specified by \f(CW\-C\fR on the command line" 4
.IX Item "Use the value specified by -C on the command line"
.PD 0
.ie n .IP "* Use the value in the ""CPAN_MINI_CONFIG"" environment variable" 4
.el .IP "* Use the value in the \f(CWCPAN_MINI_CONFIG\fR environment variable" 4
.IX Item "Use the value in the CPAN_MINI_CONFIG environment variable"
.IP "* Use \fI~/.minicpanrc\fR" 4
.IX Item "Use ~/.minicpanrc"
.IP "* Use \fICPAN/Mini/minicpan.conf\fR" 4
.IX Item "Use CPAN/Mini/minicpan.conf"
.PD
.PP
If the selected file does not exist, \f(CW\*(C`minicpan\*(C'\fR does not keep looking.
.PP
You can override this process with a \f(CW\*(C`config_file\*(C'\fR method in your subclass.
.PP
See \f(CW\*(C`CPAN::Mini\*(C'\fR for a full listing of available options.
.SH "TO DO"
.IX Header "TO DO"
Improve command-line options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Randal Schwartz's original article, which can be found here:
.PP
.Vb 1
\&  http://www.stonehenge.com/merlyn/LinuxMag/col42.html
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
Randal Schwartz <merlyn@stonehenge.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ricardo \s-1SIGNES\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
