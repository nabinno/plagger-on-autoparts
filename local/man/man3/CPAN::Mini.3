.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPAN::Mini 3"
.TH CPAN::Mini 3 "2013-12-13" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
CPAN::Mini \- create a minimal mirror of CPAN
.SH "VERSION"
.IX Header "VERSION"
version 1.111015
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
(If you're not going to do something weird, you probably want to look at the
minicpan command, instead.)
.PP
.Vb 1
\&  use CPAN::Mini;
.Ve
.PP
.Vb 5
\&  CPAN::Mini->update_mirror(
\&    remote => "http://cpan.mirrors.comintern.su",
\&    local  => "/usr/share/mirrors/cpan",
\&    log_level => 'debug',
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
CPAN::Mini provides a simple mechanism to build and update a minimal mirror of
the \s-1CPAN\s0 on your local disk.  It contains only those files needed to install
the newest version of every distribution.  Those files are:
.IP "\(bu" 4
01mailrc.txt.gz
.IP "\(bu" 4
02packages.details.txt.gz
.IP "\(bu" 4
03modlist.data.gz
.IP "\(bu" 4
the last non-developer release of every dist for every author
.SH "METHODS"
.IX Header "METHODS"
.Sh "update_mirror"
.IX Subsection "update_mirror"
.Vb 6
\&  CPAN::Mini->update_mirror(
\&    remote => "http://cpan.mirrors.comintern.su",
\&    local  => "/usr/share/mirrors/cpan",
\&    force  => 0,
\&    log_level => 'debug',
\&  );
.Ve
.PP
This is the only method that need be called from outside this module.  It will
update the local mirror with the files from the remote mirror.
.PP
If called as a class method, \f(CW\*(C`update_mirror\*(C'\fR creates an ephemeral CPAN::Mini
object on which other methods are called.  That object is used to store mirror
location and state.
.PP
This method returns the number of files updated.
.PP
The following options are recognized:
.IP "\(bu" 4
\&\f(CW\*(C`local\*(C'\fR
.Sp
This is the local file path where the mirror will be written or updated.
.IP "\(bu" 4
\&\f(CW\*(C`remote\*(C'\fR
.Sp
This is the \s-1URL\s0 of the \s-1CPAN\s0 mirror from which to work.  A reasonable default
will be picked by default.  A list of \s-1CPAN\s0 mirrors can be found at
<http://www.cpan.org/SITES.html>
.IP "\(bu" 4
\&\f(CW\*(C`dirmode\*(C'\fR
.Sp
Generally an octal number, this option sets the permissions of created
directories.  It defaults to 0711.
.IP "\(bu" 4
\&\f(CW\*(C`exact_mirror\*(C'\fR
.Sp
If true, the \f(CW\*(C`files_allowed\*(C'\fR method will allow all extra files to be mirrored.
.IP "\(bu" 4
\&\f(CW\*(C`ignore_source_control\*(C'\fR
.Sp
If true, CPAN::Mini will not try to remove source control files during
cleanup. See \f(CW\*(C`clean_unmirrored\*(C'\fR for details.
.IP "\(bu" 4
\&\f(CW\*(C`force\*(C'\fR
.Sp
If true, this option will cause CPAN::Mini to read the entire module list and
update anything out of date, even if the module list itself wasn't out of date
on this run.
.IP "\(bu" 4
\&\f(CW\*(C`skip_perl\*(C'\fR
.Sp
If true, CPAN::Mini will skip the major language distributions: perl, parrot,
and ponie.  It will also skip embperl, sybperl, bioperl, and kurila.
.IP "\(bu" 4
\&\f(CW\*(C`log_level\*(C'\fR
.Sp
This defines the minimum level of message to log: debug, info, warn, or fatal
.IP "\(bu" 4
\&\f(CW\*(C`errors\*(C'\fR
.Sp
If true, CPAN::Mini will warn with status messages on errors.  (default: true)
.IP "\(bu" 4
\&\f(CW\*(C`path_filters\*(C'\fR
.Sp
This options provides a set of rules for filtering paths.  If a distribution
matches one of the rules in \f(CW\*(C`path_filters\*(C'\fR, it will not be mirrored.  A regex
rule is matched if the path matches the regex; a code rule is matched if the
code returns 1 when the path is passed to it.  For example, the following
setting would skip all distributions from \s-1RJBS\s0 and \s-1SUNGO:\s0
.Sp
.Vb 4
\& path_filters => [
\&   qr/RJBS/,
\&   sub { $_[0] =~ /SUNGO/ }
\& ]
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`module_filters\*(C'\fR
.Sp
This option provides a set of rules for filtering modules.  It behaves like
path_filters, but acts only on module names.  (Since most modules are in
distributions with more than one module, this setting will probably be less
useful than \f(CW\*(C`path_filters\*(C'\fR.)  For example, this setting will skip any
distribution containing only modules with the word \*(L"Acme\*(R" in them:
.Sp
.Vb 1
\& module_filters => [ qr/Acme/i ]
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`also_mirror\*(C'\fR
.Sp
This option should be an arrayref of extra files in the remote \s-1CPAN\s0 to mirror
locally.
.IP "\(bu" 4
\&\f(CW\*(C`skip_cleanup\*(C'\fR
.Sp
If this option is true, CPAN::Mini will not try delete unmirrored files when it
has finished mirroring
.IP "\(bu" 4
\&\f(CW\*(C`offline\*(C'\fR
.Sp
If offline, CPAN::Mini will not attempt to contact remote resources.
.IP "\(bu" 4
\&\f(CW\*(C`no_conn_cache\*(C'\fR
.Sp
If true, no connection cache will be established.  This is mostly useful as a
workaround for connection cache failures.
.Sh "new"
.IX Subsection "new"
.Vb 1
\&  my $minicpan = CPAN::Mini->new;
.Ve
.PP
This method constructs a new CPAN::Mini object.  Its parameters are described
above, under \f(CW\*(C`update_mirror\*(C'\fR.
.Sh "mirror_indices"
.IX Subsection "mirror_indices"
.Vb 1
\&  $minicpan->mirror_indices;
.Ve
.PP
This method updates the index files from the \s-1CPAN\s0.
.Sh "mirror_file"
.IX Subsection "mirror_file"
.Vb 1
\&  $minicpan->mirror_file($path, $skip_if_present)
.Ve
.PP
This method will mirror the given file from the remote to the local mirror,
overwriting any existing file unless \f(CW$skip_if_present\fR is true.
.Sh "file_allowed"
.IX Subsection "file_allowed"
.Vb 1
\&  next unless $minicpan->file_allowed($filename);
.Ve
.PP
This method returns true if the given file is allowed to exist in the local
mirror, even if it isn't one of the required mirror files.
.PP
By default, only dot-files are allowed.  If the \f(CW\*(C`exact_mirror\*(C'\fR option is true,
all files are allowed.
.Sh "clean_unmirrored"
.IX Subsection "clean_unmirrored"
.Vb 1
\&  $minicpan->clean_unmirrored;
.Ve
.PP
This method looks through the local mirror's files.  If it finds a file that
neither belongs in the mirror nor is allowed (see the \f(CW\*(C`file_allowed\*(C'\fR method),
\&\f(CW\*(C`clean_file\*(C'\fR is called on the file.
.PP
If you set \f(CW\*(C`ignore_source_control\*(C'\fR to a true value, then this doesn't clean
up files that belong to source control systems. Currently this ignores:
.PP
.Vb 3
\&        .cvs .cvsignore
\&        .svn .svnignore
\&        .git .gitignore
.Ve
.PP
Send patches for other source control files that you would like to have added.
.Sh "clean_file"
.IX Subsection "clean_file"
.Vb 1
\&  $minicpan->clean_file($filename);
.Ve
.PP
This method, called by \f(CW\*(C`clean_unmirrored\*(C'\fR, deletes the named file.  It returns
true if the file is successfully unlinked.  Otherwise, it returns false.
.Sh "log_warn"
.IX Subsection "log_warn"
.Sh "log"
.IX Subsection "log"
.Sh "log_debug"
.IX Subsection "log_debug"
.Vb 1
\&  $minicpan->log($message);
.Ve
.PP
This will log (print) the given message unless the log level is too loo.
.PP
\&\f(CW\*(C`log\*(C'\fR, which logs at the \fIinfo\fR level, may also be called as \f(CW\*(C`trace\*(C'\fR for
backward compatibility reasons.
.Sh "read_config"
.IX Subsection "read_config"
.Vb 1
\&  my %config = CPAN::Mini->read_config(\e%options);
.Ve
.PP
This routine returns a set of arguments that can be passed to CPAN::Mini's
\&\f(CW\*(C`new\*(C'\fR or \f(CW\*(C`update_mirror\*(C'\fR methods.  It will look for a file called
\&\fI.minicpanrc\fR in the user's home directory as determined by
File::HomeDir.
.Sh "config_file"
.IX Subsection "config_file"
.Vb 1
\&  my $config_file = CPAN::Mini->config_file( { options } );
.Ve
.PP
This routine returns the config file name. It first looks at for the
\&\f(CW\*(C`config_file\*(C'\fR setting, then the \f(CW\*(C`CPAN_MINI_CONFIG\*(C'\fR environment
variable, then the default \fI~/.minicpanrc\fR, and finally the
\&\fICPAN/Mini/minicpan.conf\fR. It uses the first defined value it finds.
If the filename it selects does not exist, it returns false.
.PP
\&\s-1OPTIONS\s0 is an optional hash reference of the \f(CW\*(C`CPAN::Mini\*(C'\fR config hash.
.Sh "remote_from"
.IX Subsection "remote_from"
.Vb 1
\&  my $remote = CPAN::Mini->remote_from( $remote_from, $orig_remote, $quiet );
.Ve
.PP
This routine take an string argument and turn it into a method
call to handle to retrieve the a cpan mirror url from a source.
Currently supported methods:
.PP
.Vb 2
\&    cpan     - fetch the first mirror from your CPAN.pm config
\&    cpanplus - fetch the first mirror from your CPANPLUS.pm config
.Ve
.Sh "remote_from_cpan"
.IX Subsection "remote_from_cpan"
.Vb 1
\&  my $remote = CPAN::Mini->remote_from_cpan;
.Ve
.PP
This routine loads your \s-1CPAN\s0.pm config and returns the first mirror in mirror
list.  You can set this as your default by setting remote_from:cpan in your
\&\fI.minicpanrc\fR file.
.Sh "remote_from_cpanplus"
.IX Subsection "remote_from_cpanplus"
.Vb 1
\&  my $remote = CPAN::Mini->remote_from_cpanplus;
.Ve
.PP
This routine loads your \s-1CPANPLUS\s0.pm config and returns the first mirror in
mirror list.  You can set this as your default by setting remote_from:cpanplus
in your \fI.minicpanrc\fR file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Randal Schwartz's original article on minicpan, here:
.PP
.Vb 1
\&        http://www.stonehenge.com/merlyn/LinuxMag/col42.html
.Ve
.PP
CPANPLUS::Backend, which provides the \f(CW\*(C`local_mirror\*(C'\fR method, which performs
the same task as this module.
.SH "THANKS"
.IX Header "THANKS"
Thanks to David Dyck for letting me know about my stupid documentation errors.
.PP
Thanks to Roy Fulbright for finding an obnoxious bug on Win32.
.PP
Thanks to Shawn Sorichetti for fixing a stupid octal-number-as-string bug.
.PP
Thanks to sungo for implementing the filters, so I can finally stop mirroring
bioperl, and Robert Rothenberg for suggesting adding coderef rules.
.PP
Thanks to Adam Kennedy for noticing and complaining about a lot of stupid
little design decisions.
.PP
Thanks to Michael Schwern and Jason Kohles, for pointing out missing
documentation.
.PP
Thanks to David Golden for some important bugfixes and refactoring.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
Randal Schwartz <merlyn@stonehenge.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ricardo \s-1SIGNES\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
