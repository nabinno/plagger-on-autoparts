.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Format::Japanese::Traditional 3"
.TH DateTime::Format::Japanese::Traditional 3 "2008-08-25" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
DateTime::Format::Japanese::Traditional \- A Japanese DateTime Formatter For Traditional Japanese Calendar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use DateTime::Format::Japanese::Traditional;
\&  my $fmt = DateTime::Format::Japanese::Traditional->new();
.Ve
.PP
.Vb 6
\&  # or if you want to set options,
\&  my $fmt = DateTime::Format::Japanese::Traditional->new(
\&    number_format           => FORMAT_KANJI,
\&    month_format            => FORMAT_WAREKI_MONTH,
\&    with_traditional_marker => 1
\&  );
.Ve
.PP
.Vb 2
\&  my $str = $fmt->format_datetime($dt);
\&  my $dt  = $fmt->parse_datetime("大化三年弥生三日丑三つ刻");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a DateTime::Format module that can read tradtional
Japanese date notations and create a DateTime::Calendar::Japanese object,
and vice versa.
.PP
.Vb 1
\&  XXX WARNING WARNING WARNING XXX
.Ve
.PP
.Vb 4
\&  Currently DateTime::Format::Japanese only supports Perl 5.7 and up.
\&  This is because I'm ignorant in the ways of making robust regular
\&  expressions in Perls <= 5.6.x with Jcode. If anybody can contribute to
\&  this, I would much appreciate it
.Ve
.PP
.Vb 1
\&  XXX WARNING WARNING WARNING XXX
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "\fInew()\fP"
.IX Subsection "new()"
This constructor will create a DateTime::Format::Japanese object.
You may optionally pass any of the following parameters:
.PP
.Vb 3
\&  number_format           - how to format numbers (default: FORMAT_KANJI)
\&  month_format            - how to format months (default: FORMAT_NUMERIC_MONTH)
\&  with_traditional_marker - use traditional calendar marker (default: 0)
.Ve
.PP
Please note that all of the above parameters only take effect for
\&\fIformatting\fR, and not \fIparsing\fR. Parsing is done in a way such
that it accepts any of the known formats that this module can produce.
.Sh "$fmt\->parse_datetime($string)"
.IX Subsection "$fmt->parse_datetime($string)"
This function will parse a traditional Japanese date/time string and convert
it to a DateTime::Calendar::Japanese object. If the parsing is unsuccessful
it will croak.
Note that it will try to auto-detect whatever encoding you're using via
Encode::Guess, so you should be safe to pass any of \s-1UTF\-8\s0, euc\-jp, 
shift\-jis, and iso\-2022\-jp encoded strings.
.PP
This method can be called as a class function as well.
.PP
.Vb 4
\&  my $dt = DateTime::Format::Japanese::Traditional->parse_datetime($string);
\&  # or
\&  my $fmt = DateTime::Format::Japanese::Traditional->new();
\&  my $fmt->parse_daettime($string);
.Ve
.SH "FORMATTING METHODS"
.IX Header "FORMATTING METHODS"
All of the following methods accept a single parameter, a
DateTime::Calendar::Japanese object, and return the appropriate string
representation.
.PP
.Vb 3
\&  my $dt  = DateTime->now();
\&  my $fmt = DateTime::Format::Japanese::Traditional->new(...);
\&  my $str = $fmt->format_datetime($dt);
.Ve
.Sh "$fmt\->format_datetime($dt)"
.IX Subsection "$fmt->format_datetime($dt)"
Create a complete string representation of a DateTime::Calendar::Japanese object in Japanese
.Sh "$fmt\->format_ymd($dt)"
.IX Subsection "$fmt->format_ymd($dt)"
Create a string representation of year, month, and date of a  DateTime
object in Japanese
.Sh "$fmt\->format_year($dt)"
.IX Subsection "$fmt->format_year($dt)"
Create a string representation of the year of a DateTime::Calendar::Japanese object in Japanese
.Sh "$fmt\->format_month($dt)"
.IX Subsection "$fmt->format_month($dt)"
Create a string representation of the month of a DateTime::Calendar::Japanese object in Japanese
.Sh "$fmt\->format_day($dt)"
.IX Subsection "$fmt->format_day($dt)"
Create a string representation of the day (day of month) of a DateTime::Calendar::Japanese object
in Japanese
.Sh "$fmt\->format_time($dt)"
.IX Subsection "$fmt->format_time($dt)"
Create a string representation of the time (hour, minute, second) of a DateTime::Calendar::Japanese object in Japanese
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "\fIinput_encoding()\fP"
.IX Subsection "input_encoding()"
.Sh "\fIoutput_encoding()\fP"
.IX Subsection "output_encoding()"
Get/Set the encoding that this module should expect to use.
.Sh "\fInumber_format()\fP"
.IX Subsection "number_format()"
Get/Set the number formatting option. Possible values are:
.IP "\s-1FORMAT_ROMAN\s0" 4
.IX Item "FORMAT_ROMAN"
Formats the numbers in plain ascii roman numerals.
.IP "\s-1FORMAT_KANJI\s0" 4
.IX Item "FORMAT_KANJI"
Formats numbers in kanji numerals without any unit specifiers.
.IP "\s-1FORMAT_ZENKAKU\s0" 4
.IX Item "FORMAT_ZENKAKU"
Formats numbers in zenkaku numerals (double\-byte equivalent of roman numerals)
.IP "\s-1FORMAT_KANJI_WITH_UNIT\s0" 4
.IX Item "FORMAT_KANJI_WITH_UNIT"
Formats numbers in kanji numerals, with unit specifiers.
.Sh "\fImonth_format()\fP"
.IX Subsection "month_format()"
Get/Set the month formatting option. Possible values are:
.IP "\s-1FORMAT_NUMERIC_MONTH\s0" 4
.IX Item "FORMAT_NUMERIC_MONTH"
Formats the month using numerals.
.IP "\s-1FORMAT_WAREKI_MONTH\s0" 4
.IX Item "FORMAT_WAREKI_MONTH"
Formtas the month using traditional Japanese month names.
.Sh "\fIwith_traditional_marker()\fP"
.IX Subsection "with_traditional_marker()"
Get/Set the option to include a marker that declares the date as
a traditional Japanese date.
.SH "AUTHOR"
.IX Header "AUTHOR"
(c) 2004\-2008 Daisuke Maki <daisuke@endeworks.jp<gt>.
