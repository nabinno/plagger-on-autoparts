.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Calendar::Chinese 3"
.TH DateTime::Calendar::Chinese 3 "2011-11-29" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
DateTime::Calendar::Chinese \- Traditional Chinese Calendar Implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DateTime::Calendar::Chinese;
.Ve
.PP
.Vb 8
\&  my $dt = DateTime::Calendar::Chinese->now();
\&  my $dt = DateTime::Calendar::Chinese->new(
\&    cycle      => $cycle,
\&    cycle_year => $cycle_year,
\&    month      => $month,
\&    leap_month => $leap_month,
\&    day        => $day,
\&  );
.Ve
.PP
.Vb 6
\&  $dt->cycle;
\&  $dt->cycle_year; # 1 - 60
\&  $dt->month;      # 1-12
\&  $dt->leap_month; # true/false
\&  $dt->day;        # 1-30 
\&  $dt->elapsed_years; # years since "Chinese Epoch"
.Ve
.PP
.Vb 1
\&  my ($rd_days, $rd_secs, $rd_nanosecs) = $dt->utc_rd_values();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation of the Chinese calendar as described in 
\&\*(L"Calendrical Calculations\*(R" [1]. Please note that the following description
is the description from [1], and the author has not made attempts to verify
the correctness of statements with other sources.
.PP
The Chinese calendar described in [1] is expressed in terms of \*(L"cycle\*(R",
\&\*(L"cycle_year\*(R", \*(L"month\*(R", \*(L"a boolean leap_month\*(R", and \*(L"day\*(R".
.PP
Traditional Chinese years have been counted using the \*(L"Sexagecimal Cycle
of Names\*(R", which is a cycle of 60 names for each year. The names are
the combination of a \*(L"celestial stem\*(R" (tian1 gan1), with a \*(L"terrestrial branch\*(R"
(di4 zhi1):
.PP
.Vb 26
\&    Celestial Stems         Terrestrial Branches
\&  -------------------     -----------------------
\&  | Jia3            |     | Zi (Rat)            |
\&  -------------------     -----------------------
\&  | Yi3             |     | Chou3 (Ox)          |
\&  -------------------     -----------------------
\&  | Bing3           |     | Yin2 (Tiger)        |
\&  -------------------     -----------------------
\&  | Ding1           |     | Mao3 (Hare)         |
\&  -------------------     -----------------------
\&  | Wu4             |     | Chen2 (Dragon)      |
\&  -------------------     -----------------------
\&  | Ji3             |     | Si4 (Snake)         |
\&  -------------------     -----------------------
\&  | Geng1           |     | Wu3 (Horse)         |
\&  -------------------     -----------------------
\&  | Xin1            |     | Wei4 (Sheep)        |
\&  -------------------     -----------------------
\&  | Ren2            |     | Shen1 (Monkey)      |
\&  -------------------     -----------------------
\&  | Gui3            |     | You3 (Fowl)         |
\&  -------------------     -----------------------
\&                          | Xu1 (Dog)           |
\&                          -----------------------
\&                          | Hai4 (Pig)          |
\&                          -----------------------
.Ve
.PP
Names are assigned by running each list sequentially, so the first
year woud be jia1zi, then yi3chou3, bing1yin2, and so on.  The numbers
after each syllable indicates the tone used for the syllable.
.PP
The animal names of the Chinese \*(L"Zodiac\*(R" are \fInot\fR translations of
the terrestrial branches, which have different meanings.  For example,
the first branch, \*(L"zi\*(R", can mean \*(L"child\*(R" or \*(L"son\*(R", as well as several
other things.
.PP
Chinese months are true lunar months, which starts on a new moon and runs
until the day before the next new moon. Therefore each month consists of
exactly 29 or 30 days. The month numbers are calculated based on a logic
that combines lunar months and solar terms (which is too hard to explain
here \*(-- read \*(L"Calendrical Calculation\*(R" if you must know), and may include
leap months.
.PP
Leap months can be inserted anywhere in the year, so months are numbered
from 1 to 12, with the boolean flag \*(L"leap_month\*(R" that indicates if the
month is a leap month or not.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new"
.IX Subsection "new"
This class method accepts parameters for each date and time component: \*(L"cycle\*(R",
\&\*(L"cycle_year\*(R", \*(L"month\*(R", \*(L"leap_month\*(R", \*(L"day\*(R", \*(L"hour\*(R", \*(L"minute\*(R", \*(L"second\*(R",
\&\*(L"nanosecond\*(R". It also accepts \*(L"locale\*(R" and \*(L"time_zone\*(R" parameters.
.PP
Note that in order to avoid confusion between the official Chinese Calendar
which is based on Chinese time zone, the default value for time_zone is
*not* \*(L"floating\*(R", but is instead \*(L"Asia/Shanghai\*(R". See \s-1CAVEATS\s0.
.PP
.Vb 3
\&  XXX The time zone settings may change in a few ture version such
\&  XXX that the calculation is done in Asia/Shanghai, but the
\&  XXX resulting object is set to "floating" time zone.
.Ve
.PP
Note that currently there's no way to verify if a given date is \*(L"correct\*(R" \*(--
i.e. if you give a date as a leap_month when it in fact isn't a leap month,
all sorts of wacky things will happen. Perhaps there's a simple way to do
this. If there is, please let me know
.Sh "now"
.IX Subsection "now"
This class method is equivalent to calling \fIfrom_epoch()\fR with the value
returned from Perl's \fItime()\fR function. 
.Sh "from_object(object => ...)"
.IX Subsection "from_object(object => ...)"
This class method can be used to construct a new DateTime::Calendar::Chinese
object from any object that implements the \fIutc_rd_values()\fR method. 
.Sh "from_epoch(epoch => ...)"
.IX Subsection "from_epoch(epoch => ...)"
This class method can be used to construct a new DateTime::Calendar::Chinese
object from an epoch time instead of components.  
.Sh "set(...)"
.IX Subsection "set(...)"
This method is identical to that of DateTime, except the date components
that can be set are restricted to the Chinese ones (\*(L"cycle\*(R", \*(L"cycle_year\*(R",
\&\*(L"month\*(R", \*(L"leap_month\*(R", \*(L"day\*(R"). The time components are the same as 
that of DateTime (See \s-1CAVEATS\s0).
.Sh "set_time_zone"
.IX Subsection "set_time_zone"
Sets the time zone. This method is identical to that of DateTime.
.Sh "time_zone"
.IX Subsection "time_zone"
Gets the time zone. This method is identical to that of DateTime.
.Sh "\fIutc_rd_values()\fP"
.IX Subsection "utc_rd_values()"
Returns the current \s-1UTC\s0 Rata Die days, seconds, and nanoseconds as a three
element list. This method is identical to that of DateTime.
.Sh "cycle"
.IX Subsection "cycle"
Returns the current cycle of the sexagecimal names since the Chinese epoch
(defined to be 25 Feb, \-2636 gregorian).
.Sh "cycle_year"
.IX Subsection "cycle_year"
Returns the current year in the current cycle. 
.Sh "month"
.IX Subsection "month"
Returns the current lunar month.
.Sh "leap_month"
.IX Subsection "leap_month"
Returns true if the current month is a leap month.
.Sh "day"
.IX Subsection "day"
Returns the current day in the lunar month.
.Sh "elapsed_year"
.IX Subsection "elapsed_year"
This returns the number of years elapsed since the Chinese Epoch as defined
by [1] (Which is 15 Feb. \-2646 gregorian). Some documents use different
epoch dates, and hence this may not match with whatever source you have. 
.Sh "year_name"
.IX Subsection "year_name"
Returns the name of the year (the celestial stem and the terrestrial
branch) as \s-1UTF8\s0 (or a sequence of bytes in Perl 5.00503).
.Sh "celestial_stem"
.IX Subsection "celestial_stem"
Returns the celestial stem as \s-1UTF8\s0 (or a sequence of bytes in Perl
5.00503).
.Sh "terrestrial_branch"
.IX Subsection "terrestrial_branch"
Returns the terrestrial branch as \s-1UTF8\s0 (or a sequence of bytes in Perl
5.00503).
.Sh "year_name_py"
.IX Subsection "year_name_py"
.Sh "celestial_stem_py"
.IX Subsection "celestial_stem_py"
.Sh "terrestrial_branch_py"
.IX Subsection "terrestrial_branch_py"
These methods return the various names in Pinyin, with the tones given
as numbers at the end of each syllable.  The first terrestrial branch
is generally pronounced without a tone, and is returned as \*(L"zi\*(R".
.Sh "zodiac_animal"
.IX Subsection "zodiac_animal"
Returns the year's Zodiac animal.
.Sh "day_of_week"
.IX Subsection "day_of_week"
.Sh "elapsed_years"
.IX Subsection "elapsed_years"
.Sh "hour"
.IX Subsection "hour"
.Sh "minute"
.IX Subsection "minute"
.Sh "second"
.IX Subsection "second"
.Sh "nanosecond"
.IX Subsection "nanosecond"
.SH "CAVEATS"
.IX Header "CAVEATS"
.Sh "\s-1TIMEZONES\s0"
.IX Subsection "TIMEZONES"
Be careful with time zones! The \*(L"official\*(R" Chinese Calendar is based on
date/time in China, not your local time zone nor \*(L"floating\*(R" time zone.
This is because the Chinese Calendar is based on astronomical events,
but dates such as Chinese New Year are calculated in Chinese time and
then transferred over to wherever you're at.
.PP
For example, the Chinese New Year in 2004 is Jan 22, but that is Jan 22
in China time. The same time is Jan 21 \s-1UTC\s0, and now you'd be off by one day.
.PP
So when you're calculating Chinese Calendars, always set the time zone to
something like 'Asia/Hong_Kong', 'Asia/Shanghai', 'Asia/Taipei'
.Sh "\s-1TIME\s0"
.IX Subsection "TIME"
Because \*(L"Calendrical Calculations\*(R" did not go much in detail about the
Chinese time system, this module simply uses the time components from the
underlying DateTime module (\s-1XXX\s0 \- Note: we may implement this later, so
be careful not to use the time components too much for now)
.Sh "\s-1PERFORMANCE\s0"
.IX Subsection "PERFORMANCE"
Yes, this module is slow, because the underlying calculations are slow.
If you can contribute to the speed, please let me know. So far I've
concentrated on porting the algorithms from [1] straight over, and not
on performance. I'm sure there's a lot that could be done.
.SH "AUTHOR"
.IX Header "AUTHOR"
(c) Copyright 2004\-2007 Daisuke Maki <daisuke@endeworks.jp>.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
.SH "REFERENCES"
.IX Header "REFERENCES"
.Vb 3
\&  [1] Edward M. Reingold, Nachum Dershowitz
\&      "Calendrical Calculations (Millenium Edition)", 2nd ed.
\&       Cambridge University Press, Cambridge, UK 2002
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DateTime
DateTime::Event::Chinese
