.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::ParseXS::Utilities 3"
.TH ExtUtils::ParseXS::Utilities 3 "2012-02-02" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
ExtUtils::ParseXS::Utilities \- Subroutines used with ExtUtils::ParseXS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 20
\&  use ExtUtils::ParseXS::Utilities qw(
\&    standard_typemap_locations
\&    trim_whitespace
\&    tidy_type
\&    C_string
\&    valid_proto_string
\&    process_typemaps
\&    make_targetable
\&    map_type
\&    standard_XS_defs
\&    assign_func_args
\&    analyze_preprocessor_statements
\&    set_cond
\&    Warn
\&    blurt
\&    death
\&    check_conditional_preprocessor_statements
\&    escape_file_for_line_directive
\&    report_typemap_failure
\&  );
.Ve
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
The following functions are not considered to be part of the public interface.
They are documented here for the benefit of future maintainers of this module.
.ie n .Sh """standard_typemap_locations()"""
.el .Sh "\f(CWstandard_typemap_locations()\fP"
.IX Subsection "standard_typemap_locations()"
.IP "* Purpose" 4
.IX Item "Purpose"
Provide a list of filepaths where \fItypemap\fR files may be found.  The
filepaths \*(-- relative paths to files (not just directory paths) \*(-- appear in this list in lowest-to-highest priority.
.Sp
The highest priority is to look in the current directory.  
.Sp
.Vb 1
\&  'typemap'
.Ve
.Sp
The second and third highest priorities are to look in the parent of the
current directory and a directory called \fIlib/ExtUtils\fR underneath the parent
directory.
.Sp
.Vb 2
\&  '../typemap',
\&  '../lib/ExtUtils/typemap',
.Ve
.Sp
The fourth through ninth highest priorities are to look in the corresponding
grandparent, great-grandparent and great-great-grandparent directories.
.Sp
.Vb 6
\&  '../../typemap',
\&  '../../lib/ExtUtils/typemap',
\&  '../../../typemap',
\&  '../../../lib/ExtUtils/typemap',
\&  '../../../../typemap',
\&  '../../../../lib/ExtUtils/typemap',
.Ve
.Sp
The tenth and subsequent priorities are to look in directories named
\&\fIExtUtils\fR which are subdirectories of directories found in \f(CW@INC\fR \*(--
\&\fIprovided\fR a file named \fItypemap\fR actually exists in such a directory.
Example:
.Sp
.Vb 1
\&  '/usr/local/lib/perl5/5.10.1/ExtUtils/typemap',
.Ve
.Sp
However, these filepaths appear in the list returned by
\&\f(CW\*(C`standard_typemap_locations()\*(C'\fR in reverse order, \fIi.e.\fR, lowest\-to\-highest.
.Sp
.Vb 10
\&  '/usr/local/lib/perl5/5.10.1/ExtUtils/typemap',
\&  '../../../../lib/ExtUtils/typemap',
\&  '../../../../typemap',
\&  '../../../lib/ExtUtils/typemap',
\&  '../../../typemap',
\&  '../../lib/ExtUtils/typemap',
\&  '../../typemap',
\&  '../lib/ExtUtils/typemap',
\&  '../typemap',
\&  'typemap'
.Ve
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&  my @stl = standard_typemap_locations( \e@INC );
.Ve
.Sp
Reference to \f(CW@INC\fR.
.IP "* Return Value" 4
.IX Item "Return Value"
Array holding list of directories to be searched for \fItypemap\fR files.
.ie n .Sh """trim_whitespace()"""
.el .Sh "\f(CWtrim_whitespace()\fP"
.IX Subsection "trim_whitespace()"
.IP "* Purpose" 4
.IX Item "Purpose"
Perform an in-place trimming of leading and trailing whitespace from the
first argument provided to the function.
.IP "* Argument" 4
.IX Item "Argument"
.Vb 1
\&  trim_whitespace($arg);
.Ve
.IP "* Return Value" 4
.IX Item "Return Value"
None.  Remember:  this is an \fIin-place\fR modification of the argument.
.ie n .Sh """tidy_type()"""
.el .Sh "\f(CWtidy_type()\fP"
.IX Subsection "tidy_type()"
.IP "* Purpose" 4
.IX Item "Purpose"
Rationalize any asterisks (\f(CW\*(C`*\*(C'\fR) by joining them into bunches, removing
interior whitespace, then trimming leading and trailing whitespace.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&    ($ret_type) = tidy_type($_);
.Ve
.Sp
String to be cleaned up.
.IP "* Return Value" 4
.IX Item "Return Value"
String cleaned up.
.ie n .Sh """C_string()"""
.el .Sh "\f(CWC_string()\fP"
.IX Subsection "C_string()"
.IP "* Purpose" 4
.IX Item "Purpose"
Escape backslashes (\f(CW\*(C`\e\*(C'\fR) in prototype strings.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&      $ProtoThisXSUB = C_string($_);
.Ve
.Sp
String needing escaping.
.IP "* Return Value" 4
.IX Item "Return Value"
Properly escaped string.
.ie n .Sh """valid_proto_string()"""
.el .Sh "\f(CWvalid_proto_string()\fP"
.IX Subsection "valid_proto_string()"
.IP "* Purpose" 4
.IX Item "Purpose"
Validate prototype string.
.IP "* Arguments" 4
.IX Item "Arguments"
String needing checking.
.IP "* Return Value" 4
.IX Item "Return Value"
Upon success, returns the same string passed as argument.
.Sp
Upon failure, returns \f(CW0\fR.
.ie n .Sh """process_typemaps()"""
.el .Sh "\f(CWprocess_typemaps()\fP"
.IX Subsection "process_typemaps()"
.IP "* Purpose" 4
.IX Item "Purpose"
Process all typemap files.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&  my $typemaps_object = process_typemaps( $args{typemap}, $pwd );
.Ve
.Sp
List of two elements:  \f(CW\*(C`typemap\*(C'\fR element from \f(CW%args\fR; current working
directory.
.IP "* Return Value" 4
.IX Item "Return Value"
Upon success, returns an ExtUtils::Typemaps object.
.ie n .Sh """make_targetable()"""
.el .Sh "\f(CWmake_targetable()\fP"
.IX Subsection "make_targetable()"
.IP "* Purpose" 4
.IX Item "Purpose"
Populate \f(CW%targetable\fR.  This constitutes a refinement of the output of
\&\f(CW\*(C`process_typemaps()\*(C'\fR with respect to its fourth output, \f(CW$output_expr_ref\fR.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&  %targetable = make_targetable($output_expr_ref);
.Ve
.Sp
Single hash reference:  the fourth such ref returned by \f(CW\*(C`process_typemaps()\*(C'\fR.
.IP "* Return Value" 4
.IX Item "Return Value"
Hash.
.ie n .Sh """map_type()"""
.el .Sh "\f(CWmap_type()\fP"
.IX Subsection "map_type()"
.IP "* Purpose" 4
.IX Item "Purpose"
Performs a mapping at several places inside \f(CW\*(C`PARAGRAPH\*(C'\fR loop.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&  $type = map_type($self, $type, $varname);
.Ve
.Sp
List of three arguments.
.IP "* Return Value" 4
.IX Item "Return Value"
String holding augmented version of second argument.
.ie n .Sh """standard_XS_defs()"""
.el .Sh "\f(CWstandard_XS_defs()\fP"
.IX Subsection "standard_XS_defs()"
.IP "* Purpose" 4
.IX Item "Purpose"
Writes to the \f(CW\*(C`.c\*(C'\fR output file certain preprocessor directives and function
headers needed in all such files.
.IP "* Arguments" 4
.IX Item "Arguments"
None.
.IP "* Return Value" 4
.IX Item "Return Value"
Returns true.
.ie n .Sh """assign_func_args()"""
.el .Sh "\f(CWassign_func_args()\fP"
.IX Subsection "assign_func_args()"
.IP "* Purpose" 4
.IX Item "Purpose"
Perform assignment to the \f(CW\*(C`func_args\*(C'\fR attribute.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 1
\&  $string = assign_func_args($self, $argsref, $class);
.Ve
.Sp
List of three elements.  Second is an array reference; third is a string.
.IP "* Return Value" 4
.IX Item "Return Value"
String.
.ie n .Sh """analyze_preprocessor_statements()"""
.el .Sh "\f(CWanalyze_preprocessor_statements()\fP"
.IX Subsection "analyze_preprocessor_statements()"
.IP "* Purpose" 4
.IX Item "Purpose"
Within each function inside each Xsub, print to the \fI.c\fR output file certain
preprocessor statements.
.IP "* Arguments" 4
.IX Item "Arguments"
.Vb 4
\&      ( $self, $XSS_work_idx, $BootCode_ref ) =
\&        analyze_preprocessor_statements(
\&          $self, $statement, $XSS_work_idx, $BootCode_ref
\&        );
.Ve
.Sp
List of four elements.
.IP "* Return Value" 4
.IX Item "Return Value"
Modifed values of three of the arguments passed to the function.  In
particular, the \f(CW\*(C`XSStack\*(C'\fR and \f(CW\*(C`InitFileCode\*(C'\fR attributes are modified.
.ie n .Sh """set_cond()"""
.el .Sh "\f(CWset_cond()\fP"
.IX Subsection "set_cond()"
.IP "* Purpose" 4
.IX Item "Purpose"
.PD 0
.IP "* Arguments" 4
.IX Item "Arguments"
.IP "* Return Value" 4
.IX Item "Return Value"
.PD
.ie n .Sh """current_line_number()"""
.el .Sh "\f(CWcurrent_line_number()\fP"
.IX Subsection "current_line_number()"
.IP "* Purpose" 4
.IX Item "Purpose"
Figures out the current line number in the \s-1XS\s0 file.
.IP "* Arguments" 4
.IX Item "Arguments"
\&\f(CW$self\fR
.IP "* Return Value" 4
.IX Item "Return Value"
The current line number.
.ie n .Sh """Warn()"""
.el .Sh "\f(CWWarn()\fP"
.IX Subsection "Warn()"
.IP "* Purpose" 4
.IX Item "Purpose"
.PD 0
.IP "* Arguments" 4
.IX Item "Arguments"
.IP "* Return Value" 4
.IX Item "Return Value"
.PD
.ie n .Sh """blurt()"""
.el .Sh "\f(CWblurt()\fP"
.IX Subsection "blurt()"
.IP "* Purpose" 4
.IX Item "Purpose"
.PD 0
.IP "* Arguments" 4
.IX Item "Arguments"
.IP "* Return Value" 4
.IX Item "Return Value"
.PD
.ie n .Sh """death()"""
.el .Sh "\f(CWdeath()\fP"
.IX Subsection "death()"
.IP "* Purpose" 4
.IX Item "Purpose"
.PD 0
.IP "* Arguments" 4
.IX Item "Arguments"
.IP "* Return Value" 4
.IX Item "Return Value"
.PD
.ie n .Sh """check_conditional_preprocessor_statements()"""
.el .Sh "\f(CWcheck_conditional_preprocessor_statements()\fP"
.IX Subsection "check_conditional_preprocessor_statements()"
.IP "* Purpose" 4
.IX Item "Purpose"
.PD 0
.IP "* Arguments" 4
.IX Item "Arguments"
.IP "* Return Value" 4
.IX Item "Return Value"
.PD
.ie n .Sh """escape_file_for_line_directive()"""
.el .Sh "\f(CWescape_file_for_line_directive()\fP"
.IX Subsection "escape_file_for_line_directive()"
.IP "* Purpose" 4
.IX Item "Purpose"
Escapes a given code source name (typically a file name but can also
be a command that was read from) so that double-quotes and backslashes are escaped.
.IP "* Arguments" 4
.IX Item "Arguments"
A string.
.IP "* Return Value" 4
.IX Item "Return Value"
A string with escapes for double-quotes and backslashes.
.ie n .Sh """report_typemap_failure"""
.el .Sh "\f(CWreport_typemap_failure\fP"
.IX Subsection "report_typemap_failure"
.IP "* Purpose" 4
.IX Item "Purpose"
Do error reporting for missing typemaps.
.IP "* Arguments" 4
.IX Item "Arguments"
The \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR object.
.Sp
An \f(CW\*(C`ExtUtils::Typemaps\*(C'\fR object.
.Sp
The string that represents the C type that was not found in the typemap.
.Sp
Optionally, the string \f(CW\*(C`death\*(C'\fR or \f(CW\*(C`blurt\*(C'\fR to choose
whether the error is immediately fatal or not. Default: \f(CW\*(C`blurt\*(C'\fR
.IP "* Return Value" 4
.IX Item "Return Value"
Returns nothing. Depending on the arguments, this
may call \f(CW\*(C`death\*(C'\fR or \f(CW\*(C`blurt\*(C'\fR, the former of which is
fatal.
