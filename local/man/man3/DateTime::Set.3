.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Set 3"
.TH DateTime::Set 3 "2012-08-18" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
DateTime::Set \- Datetime sets and set math
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use DateTime;
\&    use DateTime::Set;
.Ve
.PP
.Vb 3
\&    $date1 = DateTime->new( year => 2002, month => 3, day => 11 );
\&    $set1 = DateTime::Set->from_datetimes( dates => [ $date1 ] );
\&    #  set1 = 2002-03-11
.Ve
.PP
.Vb 3
\&    $date2 = DateTime->new( year => 2003, month => 4, day => 12 );
\&    $set2 = DateTime::Set->from_datetimes( dates => [ $date1, $date2 ] );
\&    #  set2 = 2002-03-11, and 2003-04-12
.Ve
.PP
.Vb 5
\&    $date3 = DateTime->new( year => 2003, month => 4, day => 1 );
\&    print $set2->next( $date3 )->ymd;      # 2003-04-12
\&    print $set2->previous( $date3 )->ymd;  # 2002-03-11
\&    print $set2->current( $date3 )->ymd;   # 2002-03-11
\&    print $set2->closest( $date3 )->ymd;   # 2003-04-12
.Ve
.PP
.Vb 8
\&    # a 'monthly' recurrence:
\&    $set = DateTime::Set->from_recurrence( 
\&        recurrence => sub {
\&            return $_[0] if $_[0]->is_infinite;
\&            return $_[0]->truncate( to => 'month' )->add( months => 1 )
\&        },
\&        span => $date_span1,    # optional span
\&    );
.Ve
.PP
.Vb 4
\&    $set = $set1->union( $set2 );         # like "OR", "insert", "both"
\&    $set = $set1->complement( $set2 );    # like "delete", "remove"
\&    $set = $set1->intersection( $set2 );  # like "AND", "while"
\&    $set = $set1->complement;             # like "NOT", "negate", "invert"
.Ve
.PP
.Vb 2
\&    if ( $set1->intersects( $set2 ) ) { ...  # like "touches", "interferes"
\&    if ( $set1->contains( $set2 ) ) { ...    # like "is-fully-inside"
.Ve
.PP
.Vb 3
\&    # data extraction 
\&    $date = $set1->min;           # first date of the set
\&    $date = $set1->max;           # last date of the set
.Ve
.PP
.Vb 4
\&    $iter = $set1->iterator;
\&    while ( $dt = $iter->next ) {
\&        print $dt->ymd;
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DateTime::Set is a module for datetime sets.  It can be used to handle
two different types of sets.
.PP
The first is a fixed set of predefined datetime objects.  For example,
if we wanted to create a set of datetimes containing the birthdays of
people in our family for the current year.
.PP
The second type of set that it can handle is one based on a
recurrence, such as \*(L"every Wednesday\*(R", or \*(L"noon on the 15th day of
every month\*(R".  This type of set can have fixed starting and ending
datetimes, but neither is required.  So our \*(L"every Wednesday set\*(R"
could be \*(L"every Wednesday from the beginning of time until the end of
time\*(R", or \*(L"every Wednesday after 2003\-03\-05 until the end of time\*(R", or
\&\*(L"every Wednesday between 2003\-03\-05 and 2004\-01\-07\*(R".
.PP
This module also supports set math operations, so you do things like
create a new set from the union or difference of two sets, check
whether a datetime is a member of a given set, etc.
.PP
This is different from a \f(CW\*(C`DateTime::Span\*(C'\fR, which handles a continuous
range as opposed to individual datetime points. There is also a module
\&\f(CW\*(C`DateTime::SpanSet\*(C'\fR to handle sets of spans.
.SH "METHODS"
.IX Header "METHODS"
.IP "* from_datetimes" 4
.IX Item "from_datetimes"
Creates a new set from a list of datetimes.
.Sp
.Vb 1
\&   $dates = DateTime::Set->from_datetimes( dates => [ $dt1, $dt2, $dt3 ] );
.Ve
.Sp
The datetimes can be objects from class \f(CW\*(C`DateTime\*(C'\fR, or from a
\&\f(CW\*(C`DateTime::Calendar::*\*(C'\fR class.
.Sp
\&\f(CW\*(C`DateTime::Infinite::*\*(C'\fR objects are not valid set members.
.IP "* from_recurrence" 4
.IX Item "from_recurrence"
Creates a new set specified via a \*(L"recurrence\*(R" callback.
.Sp
.Vb 6
\&    $months = DateTime::Set->from_recurrence( 
\&        span => $dt_span_this_year,    # optional span
\&        recurrence => sub { 
\&            return $_[0]->truncate( to => 'month' )->add( months => 1 ) 
\&        }, 
\&    );
.Ve
.Sp
The \f(CW\*(C`span\*(C'\fR parameter is optional. It must be a \f(CW\*(C`DateTime::Span\*(C'\fR object.
.Sp
The span can also be specified using \f(CW\*(C`begin\*(C'\fR / \f(CW\*(C`after\*(C'\fR and \f(CW\*(C`before\*(C'\fR
/ \f(CW\*(C`end\*(C'\fR parameters, as in the \f(CW\*(C`DateTime::Span\*(C'\fR constructor.  In this
case, if there is a \f(CW\*(C`span\*(C'\fR parameter it will be ignored.
.Sp
.Vb 6
\&    $months = DateTime::Set->from_recurrence(
\&        after => $dt_now,
\&        recurrence => sub {
\&            return $_[0]->truncate( to => 'month' )->add( months => 1 );
\&        },
\&    );
.Ve
.Sp
The recurrence function will be passed a single parameter, a datetime
object. The parameter can be an object from class \f(CW\*(C`DateTime\*(C'\fR, or from
one of the \f(CW\*(C`DateTime::Calendar::*\*(C'\fR classes.  The parameter can also
be a \f(CW\*(C`DateTime::Infinite::Future\*(C'\fR or a \f(CW\*(C`DateTime::Infinite::Past\*(C'\fR
object.
.Sp
The recurrence must return the \fInext\fR event after that object.  There
is no guarantee as to what the returned object will be set to, only
that it will be greater than the object passed to the recurrence.
.Sp
If there are no more datetimes after the given parameter, then the
recurrence function should return \f(CW\*(C`DateTime::Infinite::Future\*(C'\fR.
.Sp
It is ok to modify the parameter \f(CW$_[0]\fR inside the recurrence
function.  There are no side\-effects.
.Sp
For example, if you wanted a recurrence that generated datetimes in
increments of 30 seconds, it would look like this:
.Sp
.Vb 8
\&  sub every_30_seconds {
\&      my $dt = shift;
\&      if ( $dt->second < 30 ) {
\&          return $dt->truncate( to => 'minute' )->add( seconds => 30 );
\&      } else {
\&          return $dt->truncate( to => 'minute' )->add( minutes => 1 );
\&      }
\&  }
.Ve
.Sp
Note that this recurrence takes leap seconds into account.  Consider
using \f(CW\*(C`truncate()\*(C'\fR in this manner to avoid complicated arithmetic
problems!
.Sp
It is also possible to create a recurrence by specifying either or both
of 'next' and 'previous' callbacks.
.Sp
The callbacks can return \f(CW\*(C`DateTime::Infinite::Future\*(C'\fR and
\&\f(CW\*(C`DateTime::Infinite::Past\*(C'\fR objects, in order to define \fIbounded
recurrences\fR.  In this case, both 'next' and 'previous' callbacks must
be defined:
.Sp
.Vb 1
\&    # "monthly from $dt until forever"
.Ve
.Sp
.Vb 15
\&    my $months = DateTime::Set->from_recurrence(
\&        next => sub {
\&            return $dt if $_[0] < $dt;
\&            $_[0]->truncate( to => 'month' );
\&            $_[0]->add( months => 1 );
\&            return $_[0];
\&        },
\&        previous => sub {
\&            my $param = $_[0]->clone;
\&            $_[0]->truncate( to => 'month' );
\&            $_[0]->subtract( months => 1 ) if $_[0] == $param;
\&            return $_[0] if $_[0] >= $dt;
\&            return DateTime::Infinite::Past->new;
\&        },
\&    );
.Ve
.Sp
Bounded recurrences are easier to write using \f(CW\*(C`span\*(C'\fR parameters. See above.
.Sp
See also \f(CW\*(C`DateTime::Event::Recurrence\*(C'\fR and the other
\&\f(CW\*(C`DateTime::Event::*\*(C'\fR factory modules for generating specialized
recurrences, such as sunrise and sunset times, and holidays.
.IP "* empty_set" 4
.IX Item "empty_set"
Creates a new empty set.
.Sp
.Vb 2
\&    $set = DateTime::Set->empty_set;
\&    print "empty set" unless defined $set->max;
.Ve
.IP "* is_empty_set" 4
.IX Item "is_empty_set"
Returns true is the set is empty; false otherwise.
.Sp
.Vb 1
\&    print "nothing" if $set->is_empty_set;
.Ve
.IP "* clone" 4
.IX Item "clone"
This object method returns a replica of the given object.
.Sp
\&\f(CW\*(C`clone\*(C'\fR is useful if you want to apply a transformation to a set,
but you want to keep the previous value:
.Sp
.Vb 2
\&    $set2 = $set1->clone;
\&    $set2->add_duration( year => 1 );  # $set1 is unaltered
.Ve
.ie n .IP "* add_duration( $duration )" 4
.el .IP "* add_duration( \f(CW$duration\fR )" 4
.IX Item "add_duration( $duration )"
This method adds the specified duration to every element of the set.
.Sp
.Vb 2
\&    $dt_dur = new DateTime::Duration( year => 1 );
\&    $set->add_duration( $dt_dur );
.Ve
.Sp
The original set is modified. If you want to keep the old values use:
.Sp
.Vb 1
\&    $new_set = $set->clone->add_duration( $dt_dur );
.Ve
.IP "* add" 4
.IX Item "add"
This method is syntactic sugar around the \f(CW\*(C`add_duration()\*(C'\fR method.
.Sp
.Vb 1
\&    $meetings_2004 = $meetings_2003->clone->add( years => 1 );
.Ve
.ie n .IP "* subtract_duration( $duration_object )" 4
.el .IP "* subtract_duration( \f(CW$duration_object\fR )" 4
.IX Item "subtract_duration( $duration_object )"
When given a \f(CW\*(C`DateTime::Duration\*(C'\fR object, this method simply calls
\&\f(CW\*(C`invert()\*(C'\fR on that object and passes that new duration to the
\&\f(CW\*(C`add_duration\*(C'\fR method.
.IP "* subtract( DateTime::Duration\->new parameters )" 4
.IX Item "subtract( DateTime::Duration->new parameters )"
Like \f(CW\*(C`add()\*(C'\fR, this is syntactic sugar for the \f(CW\*(C`subtract_duration()\*(C'\fR
method.
.ie n .IP "* set_time_zone( $tz )" 4
.el .IP "* set_time_zone( \f(CW$tz\fR )" 4
.IX Item "set_time_zone( $tz )"
This method will attempt to apply the \f(CW\*(C`set_time_zone\*(C'\fR method to every 
datetime in the set.
.IP "* set( locale => .. )" 4
.IX Item "set( locale => .. )"
This method can be used to change the \f(CW\*(C`locale\*(C'\fR of a datetime set.
.IP "* min" 4
.IX Item "min"
.PD 0
.IP "* max" 4
.IX Item "max"
.PD
The first and last \f(CW\*(C`DateTime\*(C'\fR in the set.  These methods may return
\&\f(CW\*(C`undef\*(C'\fR if the set is empty.  It is also possible that these methods
may return a \f(CW\*(C`DateTime::Infinite::Past\*(C'\fR or
\&\f(CW\*(C`DateTime::Infinite::Future\*(C'\fR object.
.Sp
These methods return just a \fIcopy\fR of the actual boundary value.
If you modify the result, the set will not be modified.
.IP "* span" 4
.IX Item "span"
Returns the total span of the set, as a \f(CW\*(C`DateTime::Span\*(C'\fR object.
.IP "* iterator / next / previous" 4
.IX Item "iterator / next / previous"
These methods can be used to iterate over the datetimes in a set.
.Sp
.Vb 4
\&    $iter = $set1->iterator;
\&    while ( $dt = $iter->next ) {
\&        print $dt->ymd;
\&    }
.Ve
.Sp
.Vb 5
\&    # iterate backwards
\&    $iter = $set1->iterator;
\&    while ( $dt = $iter->previous ) {
\&        print $dt->ymd;
\&    }
.Ve
.Sp
The boundaries of the iterator can be limited by passing it a \f(CW\*(C`span\*(C'\fR
parameter.  This should be a \f(CW\*(C`DateTime::Span\*(C'\fR object which delimits
the iterator's boundaries.  Optionally, instead of passing an object,
you can pass any parameters that would work for one of the
\&\f(CW\*(C`DateTime::Span\*(C'\fR class's constructors, and an object will be created
for you.
.Sp
Obviously, if the span you specify is not restricted both at the start
and end, then your iterator may iterate forever, depending on the
nature of your set.  User beware!
.Sp
The \f(CW\*(C`next()\*(C'\fR or \f(CW\*(C`previous()\*(C'\fR method will return \f(CW\*(C`undef\*(C'\fR when there
are no more datetimes in the iterator.
.IP "* as_list" 4
.IX Item "as_list"
Returns the set elements as a list of \f(CW\*(C`DateTime\*(C'\fR objects.  Just as
with the \f(CW\*(C`iterator()\*(C'\fR method, the \f(CW\*(C`as_list()\*(C'\fR method can be limited
by a span.
.Sp
.Vb 1
\&  my @dt = $set->as_list( span => $span );
.Ve
.Sp
Applying \f(CW\*(C`as_list()\*(C'\fR to a large recurrence set is a very expensive
operation, both in \s-1CPU\s0 time and in the memory used.  If you \fIreally\fR
need to extract elements from a large set, you can limit the set with
a shorter span:
.Sp
.Vb 1
\&    my @short_list = $large_set->as_list( span => $short_span );
.Ve
.Sp
For \fIinfinite\fR sets, \f(CW\*(C`as_list()\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.  Please note
that this is explicitly not an empty list, since an empty list is a
valid return value for empty sets!
.IP "* count" 4
.IX Item "count"
Returns a count of \f(CW\*(C`DateTime\*(C'\fR objects in the set.  Just as with the
\&\f(CW\*(C`iterator()\*(C'\fR method, the \f(CW\*(C`count()\*(C'\fR method can be limited by a span.
.Sp
.Vb 1
\&  defined( my $n = $set->count) or die "can't count";
.Ve
.Sp
.Vb 2
\&  my $n = $set->count( span => $span );
\&  die "can't count" unless defined $n;
.Ve
.Sp
Applying \f(CW\*(C`count()\*(C'\fR to a large recurrence set is a very expensive
operation, both in \s-1CPU\s0 time and in the memory used.  If you \fIreally\fR
need to count elements from a large set, you can limit the set with a
shorter span:
.Sp
.Vb 1
\&    my $count = $large_set->count( span => $short_span );
.Ve
.Sp
For \fIinfinite\fR sets, \f(CW\*(C`count()\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.  Please note
that this is explicitly not a scalar zero, since a zero count is a
valid return value for empty sets!
.IP "* union" 4
.IX Item "union"
.PD 0
.IP "* intersection" 4
.IX Item "intersection"
.IP "* complement" 4
.IX Item "complement"
.PD
These set operation methods can accept a \f(CW\*(C`DateTime\*(C'\fR list, a
\&\f(CW\*(C`DateTime::Set\*(C'\fR, a \f(CW\*(C`DateTime::Span\*(C'\fR, or a \f(CW\*(C`DateTime::SpanSet\*(C'\fR
object as an argument.
.Sp
.Vb 4
\&    $set = $set1->union( $set2 );         # like "OR", "insert", "both"
\&    $set = $set1->complement( $set2 );    # like "delete", "remove"
\&    $set = $set1->intersection( $set2 );  # like "AND", "while"
\&    $set = $set1->complement;             # like "NOT", "negate", "invert"
.Ve
.Sp
The \f(CW\*(C`union\*(C'\fR of a \f(CW\*(C`DateTime::Set\*(C'\fR with a \f(CW\*(C`DateTime::Span\*(C'\fR or a
\&\f(CW\*(C`DateTime::SpanSet\*(C'\fR object returns a \f(CW\*(C`DateTime::SpanSet\*(C'\fR object.
.Sp
If \f(CW\*(C`complement\*(C'\fR is called without any arguments, then the result is a
\&\f(CW\*(C`DateTime::SpanSet\*(C'\fR object representing the spans between each of the
set's elements.  If complement is given an argument, then the return
value is a \f(CW\*(C`DateTime::Set\*(C'\fR object representing the \fIset difference\fR
between the sets.
.Sp
All other operations will always return a \f(CW\*(C`DateTime::Set\*(C'\fR.
.IP "* intersects" 4
.IX Item "intersects"
.PD 0
.IP "* contains" 4
.IX Item "contains"
.PD
These set operations result in a boolean value.
.Sp
.Vb 2
\&    if ( $set1->intersects( $set2 ) ) { ...  # like "touches", "interferes"
\&    if ( $set1->contains( $dt ) ) { ...    # like "is-fully-inside"
.Ve
.Sp
These methods can accept a \f(CW\*(C`DateTime\*(C'\fR list, a \f(CW\*(C`DateTime::Set\*(C'\fR, a
\&\f(CW\*(C`DateTime::Span\*(C'\fR, or a \f(CW\*(C`DateTime::SpanSet\*(C'\fR object as an argument.
.IP "* previous" 4
.IX Item "previous"
.PD 0
.IP "* next" 4
.IX Item "next"
.IP "* current" 4
.IX Item "current"
.IP "* closest" 4
.IX Item "closest"
.PD
.Vb 4
\&  my $dt = $set->next( $dt );
\&  my $dt = $set->previous( $dt );
\&  my $dt = $set->current( $dt );
\&  my $dt = $set->closest( $dt );
.Ve
.Sp
These methods are used to find a set member relative to a given
datetime.
.Sp
The \f(CW\*(C`current()\*(C'\fR method returns \f(CW$dt\fR if \f(CW$dt\fR is an event, otherwise
it returns the previous event.
.Sp
The \f(CW\*(C`closest()\*(C'\fR method returns \f(CW$dt\fR if \f(CW$dt\fR is an event, otherwise
it returns the closest event (previous or next).
.Sp
All of these methods may return \f(CW\*(C`undef\*(C'\fR if there is no matching
datetime in the set.
.Sp
These methods will try to set the returned value to the same time zone
as the argument, unless the argument has a 'floating' time zone.
.IP "* map ( sub { ... } )" 4
.IX Item "map ( sub { ... } )"
.Vb 6
\&    # example: remove the hour:minute:second information
\&    $set = $set2->map( 
\&        sub {
\&            return $_->truncate( to => day );
\&        }
\&    );
.Ve
.Sp
.Vb 7
\&    # example: postpone or antecipate events which 
\&    #          match datetimes within another set
\&    $set = $set2->map(
\&        sub {
\&            return $_->add( days => 1 ) while $holidays->contains( $_ );
\&        }
\&    );
.Ve
.Sp
This method is the \*(L"set\*(R" version of Perl \*(L"map\*(R".
.Sp
It evaluates a subroutine for each element of the set (locally setting
\&\*(L"$_\*(R" to each datetime) and returns the set composed of the results of
each such evaluation.
.Sp
Like Perl \*(L"map\*(R", each element of the set may produce zero, one, or
more elements in the returned value.
.Sp
Unlike Perl \*(L"map\*(R", changing \*(L"$_\*(R" does not change the original
set. This means that calling map in void context has no effect.
.Sp
The callback subroutine may be called later in the program, due to
lazy evaluation.  So don't count on subroutine side\-effects. For
example, a \f(CW\*(C`print\*(C'\fR inside the subroutine may happen later than you
expect.
.Sp
The callback return value is expected to be within the span of the
\&\f(CW\*(C`previous\*(C'\fR and the \f(CW\*(C`next\*(C'\fR element in the original set.  This is a
limitation of the backtracking algorithm used in the \f(CW\*(C`Set::Infinite\*(C'\fR
library.
.Sp
For example: given the set \f(CW\*(C`[ 2001, 2010, 2015 ]\*(C'\fR, the callback
result for the value \f(CW2010\fR is expected to be within the span \f(CW\*(C`[
2001 .. 2015 ]\*(C'\fR.
.IP "* grep ( sub { ... } )" 4
.IX Item "grep ( sub { ... } )"
.Vb 6
\&    # example: filter out any sundays
\&    $set = $set2->grep( 
\&        sub {
\&            return ( $_->day_of_week != 7 );
\&        }
\&    );
.Ve
.Sp
This method is the \*(L"set\*(R" version of Perl \*(L"grep\*(R".
.Sp
It evaluates a subroutine for each element of the set (locally setting
\&\*(L"$_\*(R" to each datetime) and returns the set consisting of those
elements for which the expression evaluated to true.
.Sp
Unlike Perl \*(L"grep\*(R", changing \*(L"$_\*(R" does not change the original
set. This means that calling grep in void context has no effect.
.Sp
Changing \*(L"$_\*(R" does change the resulting set.
.Sp
The callback subroutine may be called later in the program, due to
lazy evaluation.  So don't count on subroutine side\-effects. For
example, a \f(CW\*(C`print\*(C'\fR inside the subroutine may happen later than you
expect.
.IP "* iterate ( sub { ... } )" 4
.IX Item "iterate ( sub { ... } )"
\&\fIdeprecated method \- please use \*(L"map\*(R" or \*(L"grep\*(R" instead.\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is offered through the \f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
Please report bugs using rt.cpan.org
.SH "AUTHOR"
.IX Header "AUTHOR"
Flavio Soibelmann Glock <fglock@gmail.com>
.PP
The \s-1API\s0 was developed together with Dave Rolsky and the DateTime
Community.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2006 Flavio Soibelmann Glock. All rights reserved.
This program is free software; you can distribute it and/or modify it
under the same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included
with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Set::Infinite
.PP
For details on the Perl DateTime Suite project please see
<http://datetime.perl.org>.
