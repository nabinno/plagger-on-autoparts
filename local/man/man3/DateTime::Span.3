.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Span 3"
.TH DateTime::Span 3 "2012-08-18" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
DateTime::Span \- Datetime spans
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use DateTime;
\&    use DateTime::Span;
.Ve
.PP
.Vb 4
\&    $date1 = DateTime->new( year => 2002, month => 3, day => 11 );
\&    $date2 = DateTime->new( year => 2003, month => 4, day => 12 );
\&    $set2 = DateTime::Span->from_datetimes( start => $date1, end => $date2 );
\&    #  set2 = 2002-03-11 until 2003-04-12
.Ve
.PP
.Vb 4
\&    $set = $set1->union( $set2 );         # like "OR", "insert", "both"
\&    $set = $set1->complement( $set2 );    # like "delete", "remove"
\&    $set = $set1->intersection( $set2 );  # like "AND", "while"
\&    $set = $set1->complement;             # like "NOT", "negate", "invert"
.Ve
.PP
.Vb 2
\&    if ( $set1->intersects( $set2 ) ) { ...  # like "touches", "interferes"
\&    if ( $set1->contains( $set2 ) ) { ...    # like "is-fully-inside"
.Ve
.PP
.Vb 3
\&    # data extraction 
\&    $date = $set1->start;           # first date of the span
\&    $date = $set1->end;             # last date of the span
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`DateTime::Span\*(C'\fR is a module for handling datetime spans, otherwise
known as ranges or periods (\*(L"from X to Y, inclusive of all datetimes
in between\*(R").
.PP
This is different from a \f(CW\*(C`DateTime::Set\*(C'\fR, which is made of individual
datetime points as opposed to a range. There is also a module
\&\f(CW\*(C`DateTime::SpanSet\*(C'\fR to handle sets of spans.
.SH "METHODS"
.IX Header "METHODS"
.IP "* from_datetimes" 4
.IX Item "from_datetimes"
Creates a new span based on a starting and ending datetime.
.Sp
A 'closed' span includes its end\-dates:
.Sp
.Vb 1
\&   $span = DateTime::Span->from_datetimes( start => $dt1, end => $dt2 );
.Ve
.Sp
An 'open' span does not include its end\-dates:
.Sp
.Vb 1
\&   $span = DateTime::Span->from_datetimes( after => $dt1, before => $dt2 );
.Ve
.Sp
A 'semi\-open' span includes one of its end\-dates:
.Sp
.Vb 2
\&   $span = DateTime::Span->from_datetimes( start => $dt1, before => $dt2 );
\&   $span = DateTime::Span->from_datetimes( after => $dt1, end => $dt2 );
.Ve
.Sp
A span might have just a beginning date, or just an ending date.
These spans end, or start, in an imaginary 'forever' date:
.Sp
.Vb 4
\&   $span = DateTime::Span->from_datetimes( start => $dt1 );
\&   $span = DateTime::Span->from_datetimes( end => $dt2 );
\&   $span = DateTime::Span->from_datetimes( after => $dt1 );
\&   $span = DateTime::Span->from_datetimes( before => $dt2 );
.Ve
.Sp
You cannot give both a \*(L"start\*(R" and \*(L"after\*(R" argument, nor can you give
both an \*(L"end\*(R" and \*(L"before\*(R" argument.  Either of these conditions will
cause the \f(CW\*(C`from_datetimes()\*(C'\fR method to die.
.Sp
To summarize, a datetime passed as either \*(L"start\*(R" or \*(L"end\*(R" is included
in the span.  A datetime passed as either \*(L"after\*(R" or \*(L"before\*(R" is
excluded from the span.
.IP "* from_datetime_and_duration" 4
.IX Item "from_datetime_and_duration"
Creates a new span.
.Sp
.Vb 4
\&   $span = DateTime::Span->from_datetime_and_duration( 
\&       start => $dt1, duration => $dt_dur1 );
\&   $span = DateTime::Span->from_datetime_and_duration( 
\&       after => $dt1, hours => 12 );
.Ve
.Sp
The new \*(L"end of the set\*(R" is \fIopen\fR by default.
.IP "* clone" 4
.IX Item "clone"
This object method returns a replica of the given object.
.ie n .IP "* set_time_zone( $tz )" 4
.el .IP "* set_time_zone( \f(CW$tz\fR )" 4
.IX Item "set_time_zone( $tz )"
This method accepts either a time zone object or a string that can be
passed as the \*(L"name\*(R" parameter to \f(CW\*(C`DateTime::TimeZone\->new()\*(C'\fR.
If the new time zone's offset is different from the old time zone,
then the \fIlocal\fR time is adjusted accordingly.
.Sp
If the old time zone was a floating time zone, then no adjustments to
the local time are made, except to account for leap seconds.  If the
new time zone is floating, then the \fI\s-1UTC\s0\fR time is adjusted in order
to leave the local time untouched.
.IP "* duration" 4
.IX Item "duration"
The total size of the set, as a \f(CW\*(C`DateTime::Duration\*(C'\fR object, or as a
scalar containing infinity.
.Sp
Also available as \f(CW\*(C`size()\*(C'\fR.
.IP "* start" 4
.IX Item "start"
.PD 0
.IP "* end" 4
.IX Item "end"
.PD
First or last dates in the span.
.Sp
It is possible that the return value from these methods may be a
\&\f(CW\*(C`DateTime::Infinite::Future\*(C'\fR or a \f(CW\*(C`DateTime::Infinite::Past\*(C'\fRxs object.
.Sp
If the set ends \f(CW\*(C`before\*(C'\fR a date \f(CW$dt\fR, it returns \f(CW$dt\fR. Note that
in this case \f(CW$dt\fR is not a set element \- but it is a set boundary.
.IP "* start_is_closed" 4
.IX Item "start_is_closed"
.PD 0
.IP "* end_is_closed" 4
.IX Item "end_is_closed"
.PD
Returns true if the first or last dates belong to the span ( begin <= x <= end ).
.IP "* start_is_open" 4
.IX Item "start_is_open"
.PD 0
.IP "* end_is_open" 4
.IX Item "end_is_open"
.PD
Returns true if the first or last dates are excluded from the span ( begin < x < end ).
.IP "* union" 4
.IX Item "union"
.PD 0
.IP "* intersection" 4
.IX Item "intersection"
.IP "* complement" 4
.IX Item "complement"
.PD
Set operations may be performed not only with \f(CW\*(C`DateTime::Span\*(C'\fR
objects, but also with \f(CW\*(C`DateTime::Set\*(C'\fR and \f(CW\*(C`DateTime::SpanSet\*(C'\fR
objects.  These set operations always return a \f(CW\*(C`DateTime::SpanSet\*(C'\fR
object.
.Sp
.Vb 4
\&    $set = $span->union( $set2 );         # like "OR", "insert", "both"
\&    $set = $span->complement( $set2 );    # like "delete", "remove"
\&    $set = $span->intersection( $set2 );  # like "AND", "while"
\&    $set = $span->complement;             # like "NOT", "negate", "invert"
.Ve
.IP "* intersects" 4
.IX Item "intersects"
.PD 0
.IP "* contains" 4
.IX Item "contains"
.PD
These set functions return a boolean value.
.Sp
.Vb 2
\&    if ( $span->intersects( $set2 ) ) { ...  # like "touches", "interferes"
\&    if ( $span->contains( $dt ) ) { ...    # like "is-fully-inside"
.Ve
.Sp
These methods can accept a \f(CW\*(C`DateTime\*(C'\fR, \f(CW\*(C`DateTime::Set\*(C'\fR,
\&\f(CW\*(C`DateTime::Span\*(C'\fR, or \f(CW\*(C`DateTime::SpanSet\*(C'\fR object as an argument.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is offered through the \f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
Please report bugs using rt.cpan.org
.SH "AUTHOR"
.IX Header "AUTHOR"
Flavio Soibelmann Glock <fglock@gmail.com>
.PP
The \s-1API\s0 was developed together with Dave Rolsky and the DateTime Community.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2006 Flavio Soibelmann Glock. All rights reserved.
This program is free software; you can distribute it and/or modify it
under the same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file
included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Set::Infinite
.PP
For details on the Perl DateTime Suite project please see
<http://datetime.perl.org>.
