.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Util::Calc 3"
.TH DateTime::Util::Calc 3 "2007-05-30" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
DateTime::Util::Calc \- DateTime Calculation Utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DateTime::Util::Calc qw(polynomial);
.Ve
.PP
.Vb 3
\&  my @coeffs = qw(2 3 -2);
\&  my $x      = 5;
\&  my $rv     = polynomial($x, @coeffs);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains some common calculation utilities that are required
to perform datetime calculations, specifically from \*(L"Calendrical Calculations\*(R"
\&\*(-- they are \s-1NOT\s0 meant to be general purpose.
.PP
Nothing is exported by default. You must either explicitly export them,
or use as fully qualified function names.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .Sh "max($a, $b)"
.el .Sh "max($a, \f(CW$b\fP)"
.IX Subsection "max($a, $b)"
.ie n .Sh "min($a, $b)"
.el .Sh "min($a, \f(CW$b\fP)"
.IX Subsection "min($a, $b)"
\&\fImax()\fR returns the bigger of \f(CW$a\fR and \f(CW$b\fR. \fImin()\fR returns the smaller of \f(CW$a\fR and \f(CW$b\fR.
.ie n .Sh "polynomial($x, @coefs)"
.el .Sh "polynomial($x, \f(CW@coefs\fP)"
.IX Subsection "polynomial($x, @coefs)"
Calculates the value of a polynomial equation, based on Horner's Rule.
.PP
.Vb 1
\&   c + b * x + a * (x ** 2)     x = 5
.Ve
.PP
is expressed as:
.PP
.Vb 1
\&   polynomial(5, c, b, a);
.Ve
.Sh "moment($dt)"
.IX Subsection "moment($dt)"
.Sh "dt_from_moment($moment)"
.IX Subsection "dt_from_moment($moment)"
\&\fImoment()\fR converts a DateTime object to moment, which is \s-1RD\s0 days + the time 
of day as fraction of the total seconds in a day.
.PP
\&\fIdt_from_moment()\fR converts a moment to DateTime object.
.Sh "\fIrata_die()\fP"
.IX Subsection "rata_die()"
Returns a new DateTime object that is set to Rata Die, 0001\-01\-01 00:00:00 \s-1UTC\s0
.Sh "bigfloat($v)"
.IX Subsection "bigfloat($v)"
.Sh "bigint($v)"
.IX Subsection "bigint($v)"
If the value \f(CW$v\fR is not a Math::BigFloat object, returns the value converted
to Math::BigFloat. Otherwise returns the value itself.
.PP
\&\fIbigint()\fR does the same for Math::BigInt.
.Sh "bf_downgrade($v)"
.IX Subsection "bf_downgrade($v)"
.Sh "bi_downgrade($v)"
.IX Subsection "bi_downgrade($v)"
These have been deprecated.
.Sh "truncate_to_midday($dt)"
.IX Subsection "truncate_to_midday($dt)"
Truncates the DateTime object to 12:00 noon.
.Sh "sin_deg($degrees)"
.IX Subsection "sin_deg($degrees)"
.Sh "cos_deg($degrees)"
.IX Subsection "cos_deg($degrees)"
.Sh "tan_deg($degrees)"
.IX Subsection "tan_deg($degrees)"
.Sh "asin_deg($degrees)"
.IX Subsection "asin_deg($degrees)"
.Sh "acos_deg($degrees)"
.IX Subsection "acos_deg($degrees)"
Each of these functions calculates their respective values based on degrees,
not radians (as Perl's version of \fIsin()\fR and \fIcos()\fR would do).
.Sh "mod($v,$mod)"
.IX Subsection "mod($v,$mod)"
Calculates the modulus of \f(CW$v\fR over \f(CW$mod\fR. Perl's built-in modulus operator (%)
for some reason rounds numbers \s-1UP\s0 when a fractional number's modulus is
taken. Many of the calculations also needed the fractional part of the
calculation, so this function takes care of both.
.PP
Example:
.PP
.Vb 1
\&  mod(12.234, 5) = 2.234
.Ve
.Sh "amod($v,$mod)"
.IX Subsection "amod($v,$mod)"
This function is almost identical to \fImod()\fR, but when the regular modulus value
is 0, returns \f(CW$mod\fR instead of 0.
.PP
Example:
.PP
.Vb 4
\&  amod(11, 5) = 1
\&  amod(10, 5) = 5
\&  amod(9, 5)  = 4
\&  amod(8, 5)  = 3
.Ve
.ie n .Sh "binary_search($hi, $lo\fP, \f(CW$mu\fP, \f(CW$phi)"
.el .Sh "binary_search($hi, \f(CW$lo\fP, \f(CW$mu\fP, \f(CW$phi\fP)"
.IX Subsection "binary_search($hi, $lo, $mu, $phi)"
This is a special version of binary search, where the terminating condition
is determined by the result of coderefs \f(CW$mu\fR and \f(CW$phi\fR.
.PP
$mu is passed the value of \f(CW$hi\fR and \f(CW$lo\fR. If it returns true upon execution,
then the search terminates. 
.PP
$phi is passed the next median value. If it returns true upon execution,
then the search terminates.
.PP
If the above two fails, then \f(CW$hi\fR and \f(CW$lo\fR are re-computed for the next
iteration.
.Sh "search_next(%opts)"
.IX Subsection "search_next(%opts)"
Performs a \*(L"linear\*(R" search until some condition is met. This is a generalized
version of the formula defined in [1] p.22. The basic idea is :
.PP
.Vb 5
\&  x = base
\&  while (! check(x) ) {
\&     x = next(x);
\&  }
\&  return x
.Ve
.PP
%opts can contain the following parameters:
.IP "base" 4
.IX Item "base"
The initial value to use to start the search process. The value can be
anything, but you must provide \f(CW\*(C`check\*(C'\fR and \f(CW\*(C`next\*(C'\fR parameters that are
capable of handling the type of thing you specified.
.IP "check (coderef)" 4
.IX Item "check (coderef)"
Code to be executed to determine the end of the search. The function receives
the current value of \*(L"x\*(R", and should return a true value if the condition
to end the loop has been reached
.IP "next (coderef, optional)" 4
.IX Item "next (coderef, optional)"
Code to be executed to determine the next value of \*(L"x\*(R". The function receives
the current value of \*(L"x\*(R", and should return the value to be used for the
next iteration.
.Sp
If unspecified, it will use a function that blindly adds 1 to whatever x is.
(so if you specified a number for \f(CW\*(C`base\*(C'\fR, it should work \*(-- but if you
passed an object like DateTime, it will probably be an error)
.PP
So for example, to iterate through 1 through 9, you could do something
like this
.PP
.Vb 4
\&  my $x = search_next(
\&    base => 1,
\&    check => sub { $_[0] == 9 }
\&  );
.Ve
.PP
And \f(CW$x\fR will be set to 9. For a more interesting example, we could look
for a DateTime object \f(CW$dt\fR matching a certain condition \f(CW\*(C`foo()\*(C'\fR:
.PP
.Vb 5
\&  my $dt = search_next(
\&    base  => $base_date,
\&    check => \e&foo,
\&    next  => sub { $_[0] + DateTime::Duration->new(days => 1) }
\&  );
.Ve
.Sh "deg2rad"
.IX Subsection "deg2rad"
Converts degrees to radians using Math::Trig, but works for Math::BigInt
objects as well.
.Sh "revolution($angle_in_degrees)"
.IX Subsection "revolution($angle_in_degrees)"
Reduces any angle to within the first revolution by sbtracting or adding
even multiples of 360.0.
.Sh "rev180($angle_in_degrees)"
.IX Subsection "rev180($angle_in_degrees)"
Reduces input to within +180..+180 degrees
.ie n .Sh "angle($h, $m\fP, \f(CW$s)"
.el .Sh "angle($h, \f(CW$m\fP, \f(CW$s\fP)"
.IX Subsection "angle($h, $m, $s)"
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2004\-2007 Daisuke Maki <daisuke@endeworks.jp>
