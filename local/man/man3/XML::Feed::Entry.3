.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Feed::Entry 3"
.TH XML::Feed::Entry 3 "2008-10-24" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
XML::Feed::Entry \- Entry/item in a syndication feed
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    ## $feed is an XML::Feed object.
\&    for my $entry ($feed->entries) {
\&        print $entry->title, "\en", $entry->summary, "\en\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIXML::Feed::Entry\fR represents an entry/item in an \fIXML::Feed\fR syndication
feed.
.SH "USAGE"
.IX Header "USAGE"
.Sh "XML::Feed::Entry\->new($format)"
.IX Subsection "XML::Feed::Entry->new($format)"
Creates a new \fIXML::Feed::Entry\fR object in the format \fI$format\fR, which
should be either \fI\s-1RSS\s0\fR or \fIAtom\fR.
.Sh "$entry\->convert($format)"
.IX Subsection "$entry->convert($format)"
Converts the \fIXML::Feed::Entry\fR object into the \fI$format\fR format, and
returns the new object.
.ie n .Sh "$entry\->title([ $title ])"
.el .Sh "$entry\->title([ \f(CW$title\fP ])"
.IX Subsection "$entry->title([ $title ])"
The title of the entry.
.ie n .Sh "$entry\->base([ $base ])"
.el .Sh "$entry\->base([ \f(CW$base\fP ])"
.IX Subsection "$entry->base([ $base ])"
The url base of the entry.
.ie n .Sh "$entry\->link([ $uri ])"
.el .Sh "$entry\->link([ \f(CW$uri\fP ])"
.IX Subsection "$entry->link([ $uri ])"
The permalink of the entry, in most cases, except in cases where it points
instead to an offsite \s-1URI\s0 referenced in the entry.
.ie n .Sh "$entry\->content([ $content ])"
.el .Sh "$entry\->content([ \f(CW$content\fP ])"
.IX Subsection "$entry->content([ $content ])"
Bn \fIXML::Feed::Content\fR object representing the full entry body, or as
much as is available in the feed.
.PP
In \s-1RSS\s0 feeds, this method will look first for
\&\fIhttp://purl.org/rss/1.0/modules/content/#encoded\fR and
\&\fIhttp://www.w3.org/1999/xhtml#body\fR elements, then fall back to a
\&\fI<description>\fR element.
.ie n .Sh "$entry\->summary([ $summary ])"
.el .Sh "$entry\->summary([ \f(CW$summary\fP ])"
.IX Subsection "$entry->summary([ $summary ])"
An \fIXML::Feed::Content\fR object representing a short summary of the entry.
Possibly.
.PP
Since \s-1RSS\s0 feeds do not have the idea of a summary separate from the entry
body, this may not always be what you want. If the entry contains both a
\&\fI<description>\fR element \fBand\fR another element typically used for
the full content of the entry\*(--either \fIhttp://www.w3.org/1999/xhtml/body\fR
or \fIhttp://purl.org/rss/1.0/modules/content/#encoded\fR\-\-we treat that as
the summary. Otherwise, we assume that there isn't a summary, and return
an \fIXML::Feed::Content\fR object with an empty string in the \fIbody\fR.
.ie n .Sh "$entry\->category([ $category ])"
.el .Sh "$entry\->category([ \f(CW$category\fP ])"
.IX Subsection "$entry->category([ $category ])"
The category in which the entry was posted.
.ie n .Sh "$entry\->author([ $author ])"
.el .Sh "$entry\->author([ \f(CW$author\fP ])"
.IX Subsection "$entry->author([ $author ])"
The name or email address of the person who posted the entry.
.ie n .Sh "$entry\->id([ $id ])"
.el .Sh "$entry\->id([ \f(CW$id\fP ])"
.IX Subsection "$entry->id([ $id ])"
The unique \s-1ID\s0 of the entry.
.ie n .Sh "$entry\->issued([ $issued ])"
.el .Sh "$entry\->issued([ \f(CW$issued\fP ])"
.IX Subsection "$entry->issued([ $issued ])"
A \fIDateTime\fR object representing the date and time at which the entry
was posted.
.PP
If present, \fI$issued\fR should be a \fIDateTime\fR object.
.ie n .Sh "$entry\->modified([ $modified ])"
.el .Sh "$entry\->modified([ \f(CW$modified\fP ])"
.IX Subsection "$entry->modified([ $modified ])"
A \fIDateTime\fR object representing the last-modified date of the entry.
.PP
If present, \fI$modified\fR should be a \fIDateTime\fR object.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
Please see the \fIXML::Feed\fR manpage for author, copyright, and license
information.
